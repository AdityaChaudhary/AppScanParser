/*
AppScan report Parser
--Aditya Chaudhary

node parser.js file1.html file2.html file3.html ...

file*.html is the report file generated by IBM App Scan
*/

var htmlparser = require("htmlparser");
var Excel = require('exceljs');
var fs = require("fs");

var workbook = new Excel.Workbook();

/*worksheet.columns = [
    { header: 'No', key: 'no' },
    { header: 'Classification', key: 'classification'},
    { header: 'Type', key: 'type'},
    { header: 'Severity', key: 'severity'},
    { header: 'File', key: 'file'}
    { header: 'Line', key: 'line'}
    { header: 'CWE ID', key: 'cwe_id'}
    { header: 'Trace', key: 'trace'}
    { header: 'Notes', key: 'notes'}
];*/



//var sys = require("sys");

//var rawHtml = "Xyz <script language= javascript>var foo = '<<bar>>';< /  script><!--<!-- Waah! -- -->";
var handler = new htmlparser.DefaultHandler(function(error, dom) {
  if (error)
    console.error(error);
  else
    console.log("[#]Parsing Complete...");
});
var parser = new htmlparser.Parser(handler);

//sys.puts(sys.inspect(handler.dom, false, null));
//console.log(handler.dom);


var parseEngine = function(file, worksheet) {

  fs.readFile(file, 'utf8', function(err, contents) {
    parser.parseComplete(contents);
    var rows = handler.dom[3].children[1].children[handler.dom[3].children[1].children.length - 1].children[0].children;
    //console.log(rows[5].children[6].children[0]);

    worksheet.addRow(['Classification', 'Type', 'Severity', 'File', 'Line', 'CWE ID', 'Trace', 'Notes']);

    for (var i = 1; i < rows.length - 1; i += 2) {
      var con = [];
      //console.log(rows[i].children[cols]);
      for (var cols = 1; cols < rows[i].children.length - 2; cols++) {
        //console.log(cols);
        try {
          if (cols == 3){
            var tmp = (rows[i].children[cols].children[0].data.split('/')[rows[i].children[cols].children[0].data.split('/').length - 2]).slice(0, -5);
            tmp = tmp.split('-')[0];
            switch(tmp){
              case "red":
                tmp = "High";
                break;
              case "yellow":
                tmp = "Medium";
                break;
              case "green":
                tmp = "Low";
                break;
              case "info":
                tmp = "Informational";
                break;
              default: break;
            }
            con.push(tmp);
          }
          else if (cols == 6)
            con.push((rows[i].children[cols].children[0].data.split('/')[rows[i].children[cols].children[0].data.split('/').length - 1]).slice(0, -6));
          else
            con.push(rows[i].children[cols].children[0].data);
        } catch (e) {
          con.push("");
        }
      }
      //console.log(i, con);
      worksheet.addRow(con);
    }

    workbook.xlsx.writeFile('findings.xlsx')
      .then(function() {
        console.log('[#]Parse Engine: Complete', file);
      });

    //console.log(contents);
  });

}


process.argv.forEach(function(val, index, array) {
  //console.log(index + ': ' + val);
  path = val;
  if (index > 1)
    if (fs.existsSync(path)) {
      // Do something
      //console.log("File Exists", path);
      var sheet = workbook.addWorksheet(path);
      var worksheet = workbook.getWorksheet(path);
      parseEngine(path,worksheet);
    } else {
      console.log("[#]File doesn't Exist", path);
    }
});
